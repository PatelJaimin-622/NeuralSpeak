@{
    ViewData["Title"] = "SpeechtoText";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<input hidden value=@ViewBag.token id="token" type="text">

<script type="text/javascript" src="https://aka.ms/csspeech/jsbrowserpackageraw"></script>
<script type="text/javascript">

    token = document.getElementById("token").value;
    var phraseDiv;
    var startRecognizeOnceAsyncButton;

    // subscription key and region for speech services.
    var subscriptionKey, serviceRegion, languageTargetOptions, languageSourceOptions;
    var SpeechSDK;
    var recognizer;
    var synthesizer;
    var outputSpeechLang = "hi-IN-MadhurNeural";
    languageTargetOptions = document.getElementById("languageTargetOptions");
    


    document.addEventListener("DOMContentLoaded", function () {
        startRecognizeOnceAsyncButton = document.getElementById("startRecognizeOnceAsyncButton");
        serviceRegion = "eastasia";
        languageTargetOptions = document.getElementById("languageTargetOptions");
        languageSourceOptions = document.getElementById("languageSourceOptions");
        phraseDiv = document.getElementById("phraseDiv");




        startRecognizeOnceAsyncButton.addEventListener("click", function () {
            debugger
            startRecognizeOnceAsyncButton.disabled = true;
            phraseDiv.innerHTML = "";
            var speechConfig = SpeechSDK.SpeechTranslationConfig.fromAuthorizationToken(token, serviceRegion);

            speechConfig.speechRecognitionLanguage = languageSourceOptions.value;
            console.log(languageTargetOptions.value.substring(0,2))
            let language = languageTargetOptions.value.substring(0,2)
            speechConfig.addTargetLanguage(language)

            var audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
            recognizer = new SpeechSDK.TranslationRecognizer(speechConfig, audioConfig);

            recognizer.recognizeOnceAsync(
                function (result) {
                    startRecognizeOnceAsyncButton.disabled = false;
                    if (result.reason === SpeechSDK.ResultReason.TranslatedSpeech) {
                        let translation = result.translations.get(language);
                        window.console.log(translation);


                        //for text to speech

                        var speechConfig1 = SpeechSDK.SpeechConfig.fromAuthorizationToken(token, serviceRegion);
                        var voiceModelAll = @Html.Raw(Json.Serialize(ViewBag.Languages));
                        outputSpeechLang = voiceModelAll.find(x => x.code == languageTargetOptions.value)
                        debugger
                        speechConfig1.speechSynthesisVoiceName = outputSpeechLang.voice;
                        synthesizer = new SpeechSDK.SpeechSynthesizer(speechConfig1);

                        synthesizer.speakTextAsync(
                            translation,
                            function (result) {
                                startSpeakTextAsyncButton.disabled = false;
                                if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
                                    resultDiv.innerHTML += "synthesis finished for [" + translation + "].\n";
                                } else if (result.reason === SpeechSDK.ResultReason.Canceled) {
                                    resultDiv.innerHTML += "synthesis failed. Error detail: " + result.errorDetails + "\n";
                                }
                                window.console.log(result);
                                synthesizer.close();
                                synthesizer = undefined;
                            },
                            function (err) {
                                startSpeakTextAsyncButton.disabled = false;
                                resultDiv.innerHTML += "Error: ";
                                resultDiv.innerHTML += err;
                                resultDiv.innerHTML += "\n";
                                window.console.log(err);

                                synthesizer.close();
                                synthesizer = undefined;
                            });


                        phraseDiv.innerHTML += translation;
                    }

                    recognizer.close();
                    recognizer = undefined;
                },
                function (err) {
                    startRecognizeOnceAsyncButton.disabled = false;
                    phraseDiv.innerHTML += err;
                    window.console.log(err);

                    recognizer.close();
                    recognizer = undefined;
                });
        });

        if (!!window.SpeechSDK) {
            SpeechSDK = window.SpeechSDK;
            startRecognizeOnceAsyncButton.disabled = false;

            document.getElementById('content').style.display = 'block';
            document.getElementById('warning').style.display = 'none';
        }
    });
</script>




<div class="content-wrapper" id="content">

    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light"></span>Speech To Speech</h4>

        <!-- Basic Layout -->
        <div class="row">
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="mt-2 mb-3">
                                <label for="largeSelect" class="form-label">Source Language</label>
                                @Html.DropDownList("languageSourceOptions", new SelectList(ViewBag.LanguagesDropDown, "Value", "Text"),"Please select language",new{@class = "select2 form-select"})
                            </div>

                            <div class="mt-2 mb-3">
                                <label for="largeSelect" class="form-label">Target Language</label>
                                @Html.DropDownList("languageTargetOptions", new SelectList(ViewBag.LanguagesDropDown, "Value", "Text"),"Please select language",new{@class = "select2 form-select"})
                            </div>

                            <button id="startRecognizeOnceAsyncButton" class="btn btn-primary">Send</button>
                            <div class="mb-3">
                                <label class="form-label" for="basic-default-message">Output Text</label>
                                <textarea readonly id="phraseDiv"
                                          class="form-control"
                                          placeholder="Hi, Do you have a moment to talk Joe?"></textarea>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="container-fluid flex-grow-1 container-p-y" id="warning">
        <h1 style="font-weight:500;">Speech Recognition Speech SDK not found (microsoft.cognitiveservices.speech.sdk.bundle.js missing).</h1>
    </div>
</div>